[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualization for Regression Monkeys",
    "section": "",
    "text": "Welcome\nこのQuarto Bookは以下のシリーズと連動して運用されています:",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Data Visualization for Regression Monkeys",
    "section": "References",
    "text": "References\n\n\nYau, N. (2013), Data\npoints: Visualization that means something, Indianapolis, Ind.\n: John Wiley.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "posts/introduction.html",
    "href": "posts/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "良い可視化とは?\n良いデータ可視化は，統計分析と可視化デザインの２つの能力に基づいています．\n両方のスキルを適切に組み合わせることによって，データ探索とstory-tellingが結びついて，データの理解を目的とする科学的なコミュニケーションとなります．\n▶  Dataとはなにか？\nDataとは，スプレッドシートやカンマ区切りのレコードの集合といったコンピュター上での存在形式を指すのではなく，一義的には「世界の断面を記録したもの」です．\n▶  Rules vs Suggestions\nbar chartなりscatter plotなり，読み手がデータについて正確な解釈をすることができる可視化でなければならない，というのはデータ可視化のルールの１つです． 一方，axisのスケールなどは科学分野ではScientific Notation(例: \\(-1.602\\times 10^{-19}\\))を用いるべきなど，コミュニケーションの場面に応じて推奨が変わってきます．\n「余分な情報は削ぎ落とせ」と上司からコメントをもらったとしても，なにが余分な情報なのかは場面によって異なります．そのため，なにがRulesでなにがSuggestionなのかを区別する習慣が重要になります．",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "posts/introduction.html#良い可視化とは",
    "href": "posts/introduction.html#良い可視化とは",
    "title": "Introduction",
    "section": "",
    "text": "Definition 1 : 可視化 \nデータの構造・傾向・異常などを人が視覚的に理解できる形に変換する工程のことを可視化と呼ぶ．\n\n\n\n\n統計分析能力がない可視化デザインは，単なる様式美の提供にとどまり\n可視化デザイン能力が伴わない統計分析は単なる分析，データ探索にとなります\n\n\n\n\n\n\n\n\n可視化パッケージとstory-tellingの違い\nデータを用いたstory-tellingという活動の中の一つの工程として「データの構造やパターンを見やすくする」可視化が存在します．その可視化工程の便利ツールとしてmatplotlib, plotly, ggplot といった可視化パッケージが存在します． 可視化パッケージは可視化手法に関する文法(grammer)がユーザーフレンドリーな形で実装で実装されており，それらを使いこなすことで自分が伝えたい内容を上手く可視化オブジェクト(scatter plot, line plot, heatmap, etc.,)として出力することができます．\n一方，可視化パッケージを利用するにあたって，以下のポイントを常に忘れないようにしましょう\n\n可視化パッケージを使って出力されたものは，あくまでユーザーが指定したものに対応したオブジェクトであって，それ自体がデータを用いたstory-tellingになるわけではない\n可視化パッケージを使いこなしたとしても，その可視化オブジェクトスペース（表現幅）は可視化パッケージごとに規程されてしまうため，ユーザーが描きたい可視化オブジェクトは必ずしも描けるとは限らない\n\n ▶  可視化パッケージオブジェクト表現空間の制限\nたとえば seaborn でヒストグラムを描きたいと思ったとき，指定できるオプションや見た目は，seabornが提供している機能に限定されます． ユーザー操作に応じて可視化を変化させたい（インタラクティブ）場合，seabornだけでは不可能で，plotlyなど別パッケージの利用などを検討する必要が有ります．",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html",
    "href": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html",
    "title": "1  質的データの出現頻度",
    "section": "",
    "text": "問題設定\n以下のようなカテゴリ別出現頻度のデータが与えられたとします．\nCode\nimport pandas as pd\n\n\ndata = {\n    \"faulty_component\": [\n        \"ハードディスク\", \"ハードディスク\",\n        \"メモリ\", \"メモリ\",\n        \"電源ユニット\", \"電源ユニット\",\n        \"ファン\", \"マザーボード\",\n        \"液晶ディスプレイ\", \"液晶ディスプレイ\",\n        \"ソフトウェア\", \"ソフトウェア\"\n    ],\n    \"faulty_category\": [\n        \"接続不良\", \"異音\",\n        \"起動不良\", \"ブルースクリーン\",\n        \"電源不安定\", \"電源不良\",\n        \"異音\", \"接続不良\",\n        \"画面不認識\", \"表示トラブル\",\n        \"起動時エラー\", \"アプリ強制終了\"\n    ],\n    \"count\": [125, 87, 73, 52, 64, 91, 40, 38, 70, 33, 49, 58]\n}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n\nfaulty_component\nfaulty_category\ncount\n\n\n\n\n0\nハードディスク\n接続不良\n125\n\n\n1\nハードディスク\n異音\n87\n\n\n2\nメモリ\n起動不良\n73\n\n\n3\nメモリ\nブルースクリーン\n52\n\n\n4\n電源ユニット\n電源不安定\n64\n\n\n5\n電源ユニット\n電源不良\n91\n\n\n6\nファン\n異音\n40\n\n\n7\nマザーボード\n接続不良\n38\n\n\n8\n液晶ディスプレイ\n画面不認識\n70\n\n\n9\n液晶ディスプレイ\n表示トラブル\n33\n\n\n10\nソフトウェア\n起動時エラー\n49\n\n\n11\nソフトウェア\nアプリ強制終了\n58",
    "crumbs": [
      "1次元データ",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>質的データの出現頻度</span>"
    ]
  },
  {
    "objectID": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html#問題設定",
    "href": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html#問題設定",
    "title": "1  質的データの出現頻度",
    "section": "",
    "text": "faulty_component: 故障箇所\nfaulty_category: 故障内容に応じた分類\ncount: 出現頻度\n\n\n\n可視化方針\n以下では\n\n複数カテゴリ変数を結合して生成したラベル変数をkey，出現頻度をvalueとしたデータについて，出現頻度をbar plot, 累積頻度をline plotとして可視化\n2つのカテゴリ次元にわたる値の頻度分布をheatmapを用いて可視化\n\nの２つを可視化実装を取り扱いますが，実装説明の前にEDAとしてどのようなstory-tellingが考えられるか紹介します．\n\n\n\n\n\n\n\nパレート図分析summary例\n\n\n\n\n\n\nExample 1.1 \n\n\n\n\n\n\n\n分析テーマ\n無数にあるように見える故障のうち，実際に対応すべきはごく一部の代表的なパターンなのではないか？\n\n\n可視化解釈\nカテゴリ組み合わせは無数にあるが，Top 10だけでも異常発生件数全体の 80%をしめており，Top 10のみに集中してアクションをとるべき\n\n\nインサイト\nリソースを広く分散するのではなく，「ファン-動作不良」「HDD-認識不能」など，頻度の高いカテゴリに絞って改善策・品質対策・部品見直し・製造工程チェックを行うことが，最もコストパフォーマンスの高い改善になる\n\n\n\n\n\n\nExample 1.2 \n\n\n\n\n\n\n\n分析テーマ\n故障カテゴリの問題があるため故障頻度分布は裾の厚い分布担っているのではないか？\n\n\n可視化解釈\nカテゴリ組み合わせTop 10に絞っても累積故障割合は全体の40%を占めるにとどまっており，故障カテゴリは裾の厚い(fat-tailed)分布と見える．故障カテゴリ分類について一部粒度が細かすぎるため裾が厚くなってしまったと仮説立て，補修アクションの観点を踏まえてカテゴリを再定義した上で集計し直したところ，Top10カテゴリで全体の約75%をカバーする構造が浮かび上がった．(=fat-tailed 分布の見え方は，分類設計そのものの歪みを示している可能性がある)\n\n\nインサイト\n故障ログの分類設計には，実際のオペレーションや対応フローとの整合性を持たせることが重要再定義したカテゴリを標準分類とし，継続的な分析に活用できるよう設計を整備する必要性あり\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nheatmap分析summary例\n\n\n\n\n\n\nExample 1.3 \n\n\n\n\n\n\n\n分析テーマ\n故障箇所 × 故障内容の組み合わせ頻度に偏りが存在するかを確認し，重点対応すべきカテゴリを特定する\n\n\n可視化解釈\n故障箇所と故障内容の組み合わせを2軸にとったヒートマップを作成したところ，特定のパターンに件数が極端に集中している構造が明らかになったたとえば，「HDD × 認識不能」や「ファン × 動作不良」といった一部の組み合わせセルが強調され，その他多くのセルが極端に件数の少ない状態であることから，故障パターンが限定的であることが視覚的に示された\n\n\nインサイト\n故障は一見バラバラに発生しているようでいて，実際には限られた数の典型的パターンに集中的に発生している\n\n\n\n\n\n\nExample 1.4 \n\n\n\n\n\n\n\n分析テーマ\n故障箇所 × 故障内容の組み合わせの中で，一見目立たないが相対的に異常頻度が高い“隠れホットスポット”を可視化する\n\n\n可視化解釈\n故障ログ全体をヒートマップで俯瞰した結果，全体件数では上位に入らないカテゴリの中にも，特定の故障内容に偏った異常発生が集中している箇所があることが明らかになった「電源ユニット × 異音」や「メモリ × 接触不良」など，ランキングでは目立たないものの，他の故障内容と比較すると明らかに“浮いている”セルが存在していた\n\n\nインサイト\n今後のモニタリングでは，件数が少なくても極端な偏りを示す“異常に濃いセル”をトリガーに，点検対象の見直しやアラート条件の再設計を検討すべき",
    "crumbs": [
      "1次元データ",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>質的データの出現頻度</span>"
    ]
  },
  {
    "objectID": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html#可視化実装1-パレート図",
    "href": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html#可視化実装1-パレート図",
    "title": "1  質的データの出現頻度",
    "section": "可視化実装1: パレート図",
    "text": "可視化実装1: パレート図\n ▶  前処理\n出現頻度のカラムを用いて事前に descending sort を以下のように実施します．\n\n\nCode\ndf_sorted = df.sort_values(by=\"count\", ascending=False).reset_index(drop=True)\ndf_sorted[\"cum_percent\"] = df_sorted[\"count\"].cumsum() / df_sorted[\"count\"].sum()\ndf_sorted[\"label\"] = df_sorted[\"faulty_component\"].astype(str) + \"-\" + df_sorted[\"faulty_category\"].astype(str)\ndf_sorted.head()\n\n\n\n\n\n\n\n\n\nfaulty_component\nfaulty_category\ncount\ncum_percent\nlabel\n\n\n\n\n0\nハードディスク\n接続不良\n125\n0.160256\nハードディスク-接続不良\n\n\n1\n電源ユニット\n電源不良\n91\n0.276923\n電源ユニット-電源不良\n\n\n2\nハードディスク\n異音\n87\n0.388462\nハードディスク-異音\n\n\n3\nメモリ\n起動不良\n73\n0.482051\nメモリ-起動不良\n\n\n4\n液晶ディスプレイ\n画面不認識\n70\n0.571795\n液晶ディスプレイ-画面不認識\n\n\n\n\n\n\n\n  ▶  引数テーブル\n\nArgs\n\n\n\n\n\n\n引数\n説明\n\n\n\n\ndata\nカテゴリ，件数，累積値を含む入力データ．cumulative plotが正しく動作するには，データが適切にソートされている必要がある\n\n\ncategory_column\nx軸に使用するカテゴリ列の名前\n\n\ncount_column\n棒グラフ（主軸）に使用する件数列の名前\n\n\ncumulative_column\nline plot(y2-axis)に使用する累積値（例：パーセンテージ）の列の名前\n\n\nxaxis_name\n: x軸のタイトル．デフォルトは \"\"\n\n\ny1_axis_name\ny1-axisのタイトル．デフォルトは \"\"\n\n\ny2_axis_name\ny2-axisのタイトル．デフォルトは \"\"\n\n\ny1_label\nbar plotのlegendラベル．デフォルトは \"\"\n\n\ny2_label\ncumulative plotのlegendラベル．デフォルトは \"\"\n\n\nfigure_title\n図全体のタイトル．デフォルトは \"\"\n\n\nfigsize\nmatplotlib用のfigure size設定値(tuple)\n\n\n\n  ▶  Plotly を用いた可視化\n\n\nCode\nimport plotly.graph_objects as go\n\n\ndef plot_category_frequency_plotly(\n    data: pd.DataFrame,\n    category_column: str,\n    count_column: str,\n    cumulative_column: str,\n    xaxis_name: str = \"\",\n    y1_axis_name: str = \"\",\n    y2_axis_name: str = \"\",\n    y1_label: str = \"\",\n    y2_label: str = \"\",\n    figure_title: str = \"\",\n) -&gt; go.Figure:\n    \"\"\"\n    - カテゴリごとの件数を棒グラフで，累積値（例：累積パーセンテージ）を折れ線グラフで可視化するPlotly図を生成\n    - cumulative plotが正しく動作するには，データが適切にソートされている必要がある\n    \"\"\"\n    # create bar trace\n    bar = go.Bar(\n        x=data[category_column],\n        y=data[count_column],\n        name=y1_label,\n        yaxis=\"y1\",\n        marker=dict(color=\"#6699CC\"),\n    )\n\n    # Create cumulative line trace\n    line = go.Scatter(\n        x=data[category_column],\n        y=data[cumulative_column],\n        name=y2_label,\n        yaxis=\"y2\",\n        mode=\"lines+markers\",\n        line=dict(color=\"#000000\", dash=\"dot\"),\n    )\n\n    # Layout\n    layout = go.Layout(\n        title=dict(\n            text=figure_title,\n            x=0.,\n            xanchor=\"left\",\n            yanchor=\"top\",\n        ),\n        margin=dict(t=50),\n        xaxis=dict(title=xaxis_name, tickangle=45),\n        yaxis=dict(title=y1_axis_name),\n        yaxis2=dict(\n            title=y2_axis_name,\n            overlaying=\"y\",\n            side=\"right\",\n            range=[0, 1.1],\n            gridcolor=\"#EFF5F5\",\n        ),\n        legend=dict(x=1.05, y=1.0, orientation=\"v\"),\n    )\n\n    # Plot\n    fig = go.Figure(data=[bar, line], layout=layout).update_layout(\n        {\"plot_bgcolor\": \"#EFF5F5\", \"yaxis\": {\"gridcolor\": \"#EFF5F5\"}}\n    )\n\n    return fig\n\n\n実行コードは以下，\n\n\nCode\nfig = plot_category_frequency_plotly(\n    data=df_sorted,\n    category_column=\"label\",\n    count_column=\"count\",\n    cumulative_column=\"cum_percent\",\n    xaxis_name=\"Faulty Category\",\n    y1_axis_name=\"Frequency\",\n    y2_axis_name=\"Cumulative Percentage\",\n    y1_label=\"件数\",\n    y2_label=\"累積割合\",\n    figure_title=\"PC Faulty component frequency\",\n)\nfig.show()\n\n\n                                                \n\n\n  ▶  matplotlib を用いた可視化\n\n\nCode\nimport matplotlib.pyplot as plt\n\n\ndef plot_category_frequency_matplotlib(\n    data: pd.DataFrame,\n    category_column: str,\n    count_column: str,\n    cumulative_column: str,\n    xaxis_name: str = \"\",\n    y1_axis_name: str = \"\",\n    y2_axis_name: str = \"\",\n    y1_label: str = \"\",\n    y2_label: str = \"\",\n    figure_title: str = \"\",\n    figsize: tuple = (8, 6),\n):\n    fig, ax1 = plt.subplots(figsize=figsize)\n    ax1.set_facecolor(\"#EFF5F5\")  # 👈 plot background color\n\n    # Bar plot on primary y-axis\n    bars = ax1.bar(\n        data[category_column], data[count_column], color=\"#6699CC\", label=y1_label\n    )\n    ax1.set_ylabel(y1_axis_name, fontsize=12)\n    ax1.set_xlabel(xaxis_name, fontsize=12)\n    ax1.tick_params(axis=\"y\")\n\n    # Line plot on secondary y-axis\n    ax2 = ax1.twinx()\n    line = ax2.plot(\n        data[category_column],\n        data[cumulative_column],\n        color=\"#000000\",\n        linestyle=\"dotted\",\n        marker=\"o\",\n        label=y2_label,\n    )\n    ax2.set_ylabel(y2_axis_name, fontsize=12)\n    ax2.set_ylim(0, 1.1)\n    ax2.tick_params(axis=\"y\")\n    plt.setp(ax1.get_xticklabels(), rotation=(360-45), ha=\"left\")  # 👈 Rotate x-axis labels\n    \n    # Title and legend\n    fig.suptitle(figure_title, x=0.0, ha=\"left\", fontsize=14)\n\n    # Combine legends from both axes\n    lines_labels = [*ax1.get_legend_handles_labels(), *ax2.get_legend_handles_labels()]\n    fig.legend(loc=\"upper left\", bbox_to_anchor=(0.925, 0.925))\n    fig.patch.set_facecolor(\"#FFFFFF\")\n\n    plt.tight_layout()\n    return fig, ax1, ax2\n\n\n実行コードは以下，\n\n\nCode\nfrom regmonkey_style import stylewizard as sw\n\n# japanese language setup\nsw.set_font(\"IPAexGothic\")\n\n\nfig, ax1, ax2 = plot_category_frequency_matplotlib(\n    data=df_sorted,\n    category_column=\"label\",\n    count_column=\"count\",\n    cumulative_column=\"cum_percent\",\n    xaxis_name=\"Faulty Category\",\n    y1_axis_name=\"Frequency\",\n    y2_axis_name=\"Cumulative Percentage\",\n    y1_label=\"件数\",\n    y2_label=\"累積割合\",\n    figure_title=\"PC Faulty component frequency\",\n)\nplt.show()",
    "crumbs": [
      "1次元データ",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>質的データの出現頻度</span>"
    ]
  },
  {
    "objectID": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html#可視化実装2-heatmap",
    "href": "posts/1D-datavisualization/frequency-counts-of-data-with-bar-plot.html#可視化実装2-heatmap",
    "title": "1  質的データの出現頻度",
    "section": "可視化実装2: heatmap",
    "text": "可視化実装2: heatmap\n\nここでは，xaxis, yaxisとなる２つのカテゴリ変数を用いてpivot tableを作成し，それをheatmapで可視化\npivotにあたっての集計関数は sum を用いる\nNaN（欠損値）はプロット前に0で補完\n\"PuBu\" カラースケールを使用\n\n ▶  実装\n\n\nCode\nimport seaborn as sns\n\n\ndef heatmap_frequency(\n    data: pd.DataFrame,\n    xaxis_column: str,\n    yaxis_column: str,\n    value_column: str,\n    x_axis_name: str = \"\",\n    y_axis_name: str = \"\",\n    figure_title: str = \"\",\n    plot_type = 'plotly',\n    figsize = (10, 6)\n):\n    table = pd.pivot_table(\n        data,\n        values=value_column,\n        index=[yaxis_column],\n        columns=[xaxis_column],\n        aggfunc=\"sum\",\n    ).fillna(0)\n\n    if plot_type == 'plotly':\n        fig = go.Figure(\n            data=go.Heatmap(\n                z=table.values,\n                x=table.columns,  # Optional: x-axis labels\n                y=table.index,  # Optional: y-axis labels\n                colorscale=\"PuBu\",  # You can try: 'Blues', 'Hot', 'Cividis', etc.\n            )\n        )\n\n        fig.update_layout(\n            title=figure_title, xaxis_title=x_axis_name, yaxis_title=y_axis_name\n            \n        )\n\n        return fig\n    \n    else:\n         # Create the plot\n        fig, ax = plt.subplots(figsize=figsize)\n\n        sns.heatmap(\n            table.values,\n            xticklabels=table.columns,\n            yticklabels=table.index,\n            cmap=\"PuBu\",\n            ax=ax\n        )\n\n        ax.set_xlabel(x_axis_name)\n        ax.set_ylabel(y_axis_name)\n        ax.set_title(figure_title, loc=\"center\")\n\n        plt.xticks(rotation=(360-45), ha='left')\n        plt.yticks(rotation=0)\n\n        plt.tight_layout()\n        return fig, ax\n\n\n ▶  Plotly による可視化\n\n\nCode\nfig = heatmap_frequency(\n    data=df_sorted,\n    xaxis_column=\"faulty_category\",\n    yaxis_column=\"faulty_component\",\n    value_column=\"count\",\n    x_axis_name=\"故障カテゴリ\",\n    y_axis_name=\"故障箇所\",\n    figure_title=dict(\n        text=\"故障分布\",\n        font=dict(size=18),\n        automargin=True,\n        x=0.5,  # Center title\n        y=0.95,\n        xanchor=\"center\",\n    ),\n)\n\n\nfig.show()\n\n\n                                                \n\n\n ▶  matplotlib による可視化\n\n\nCode\nfig, ax = heatmap_frequency(\n    data=df_sorted,\n    xaxis_column='faulty_category',\n    yaxis_column='faulty_component',\n    value_column='count',\n    x_axis_name='故障カテゴリ',\n    y_axis_name='故障箇所',\n    figure_title='故障分布',\n    plot_type = 'matplotlib',\n)\n\nplt.show()",
    "crumbs": [
      "1次元データ",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>質的データの出現頻度</span>"
    ]
  }
]